{  
    "meta":{  
        "name":"PMHC.co",
        "version":"1",
        "github":"http://www.github.com/philarr",
        "linkedin":"https://www.linkedin.com/in/pmhcco",
        "twitter":"http://www.twitter.com/pmhc_",
        "email":"philip@pmhc.co",
        "cdn":"http://www.pmhc.co",
        "phone": "604 781 9813"
    },
    "profile":{  
        "title":"I had the opportunity to work from the perspective of multiple roles through self-initiated projects.",
        "aboutme":"I love making all kinds of things for the web but my favourite projects are designing and developing web applications! I became strongly engaged in this field after creating my first web page as a child. As the web has become increasingly fast paced with new frameworks and standards released every year, I have recognized the importance of humility and geniune interest in this field to succeed. I am always learning!\\nMy time as an Interactive Arts student at Simon Fraser University has shown me the importance of user experience and interface design and I aim to incorporate it into my decision process during any development work.",
        "skill": [
            {
                "type":"front-end",
                "tech":[
                    "HTML",
                    "CSS (Sass)",
                    "Javascript (ES6)",
                    "React",
                    "Bootstrap",
                    "jQuery"
                ]
            },
            {
                "type":"back-end", 
                "tech":[
                    "Node.js",
                    "PHP",
                    "MySQL",
                    "Redis",
                    "Nginx",
                    "Apache"
                ]
            },
            {
                "type":"workflow",
                "tech": [
                    "Git", 
                    "npm", 
                    "Webpack", 
                    "PostCSS"
                ]
            },
            {
                "type":"desktop",
                "tech": [
                    "C#.NET",
                    "Processing"
                ]
            }

        ],
        "mapOption":{  
            "key":"AIzaSyD1XSn4mO0TXODHhJ8epGNhU_WQ4koQYUY",
            "location":[  
                49.2501979,
                -123.2344053
            ],
            "utc": -7
        }
  
    },
    "projects":[  
        {  
            "uid":"portfolio-2016",
            "name":"Portfolio",
            "year":"2016",
            "type":"Web Application",
            "source":"http://www.github.com/philarr/portfolio-private",
            "desc":"The newest iteration of my personal portfolio using isomorphic React.",
            "tech":[  
                "React",
                "Redux",
                "Node.js",
                "Express",
                "REST"
            ],
            "color":[  
                "#292E36",
                "#21262E"
            ],
            "display":{  
               "background": "http://pmhc.co/images/hero/mountain_night.jpg",
                "front":{  
                    "caption":"Portfolio 2016",
                    "src":"pmhc1.jpg",
                    "size": [1903, 1431]
                },
                "secondary":{  
                    "caption":"Secondary Page",
                    "src":"portfolio-2016-2.jpg",
                    "size": [1980, 1080]
                }
            },
            "overview":"This project was the result of my initiative to learn modern front-end tools and frameworks. The Node.js ecosystem and Javascript as an universal language has streamlined my workflow by allowing the creation of reusable code.\\nA boilerplate is now also available for my future React.js projects.",
            "components":{  
                "subtitle":"Built in ES6, transpiled to ES5 with Babel and bundled into a single file with Webpack.",
                "list":[  
                    {  
                        "name":"Single-Page App",
                        "tech":[  
                            "React.js", "Redux"
                        ],
                        "desc":"React.js was the modern framework chosen to build this portfolio. Compared to other heavy frameworks like Angular, React allowed me to start with a simple view library and the option to add functionalities from its rich ecosystem as needed.\\nRedux is used to store predictive UI state and fetched data."
                    },
                    {  
                        "name":"Server Rendering",
                        "tech":[  
                            "Node.js", "Express", "Nginx"
                        ],
                        "desc":"Built with Express on Node.js, the server pre-fetches data and renders React components into HTML on first visit to decrease load times and improve SEO by allowing web crawlers to view a full rendered page. It also serves as an API endpoint for the React client.\\nNginx is used as a reverse proxy for the Node application to balance load and serve static images."
                    },
                     {  
                        "name":"Deferred Loading",
                        "tech":[  
                            "Javascript"
                        ],
                        "desc":"The loading of image assets is delayed until it is within the browser's viewport to prevent unnecessary download. In order to prevent sudden page jump when loaded images are inserted into the page, pre-emptive padding of the image's container is done by calculating the aspect ratio."
                    },
                     {  
                        "name":"Responsive Design",
                        "tech":[  
                            "CSS"
                        ],
                        "desc":"Website is viewable in all devices with consideration for usability in mobile devices."
                    }

                ]
            },
            "design":{  
                "subtitle":"Responsive experience with engaging CSS effects while maintaining a simple flow of navigation between pages.",
                "list":[  
                    {  
                        "caption":"Landing Page",
                        "src":"pmhc1.jpg",
                        "size": [1903, 1431]
                    },
                    {  
                        "caption":"Responsive Menu",
                        "src":"portfolio-2016-3.jpg",
                        "size": [1412, 859]
                    },
                    {  
                        "caption":"Profile Page",
                        "src":"portfolio-2016-2.jpg",
                        "size": [1664, 2182]
                    }
                ]
            }
        },
        {  
            "uid":"xivdps",
            "name":"XIVDPS",
            "year":"2015",
            "type":"Web Application",
            "url":"http://www.xivdps.com",
            "source":"http://www.github.com/philarr/xivdps-web",
            "desc":"Game data collection and analysis tool consisting of multiple components across different platforms.",
            "tech":[  
                "PHP",
                "MySQL",
                "Redis",
                "C#",
                "Node.js"
            ],
            "color":[  
                "#23252E",
                "#1D212C"
            ],
            "display":{
                "background": "http://pmhc.co/images/hero/xivdps_.png",
                "front":{  
                    "caption":"Data Visualization",
                    "src":"xivdps-1.jpg",
                    "size": [1245, 992]
                },
                "secondary":{  
                    "caption":"Secondary Page",
                    "src":"1.jpg",
                    "size": [1245, 992]
                }
            },
            "overview":"XIVDPS gathers dynamic data from game application into aggregated results. With the data visualized, players review their performance and game movements on the website.\\nThe game does not officially expose a public API for add-ons so additional steps is necessary to understand the application's memory structure and mechanics. This project spans across area of desktop, back-end and front-end.",
            "components":{  
                "subtitle":"Each component works in tandem to create a flow of information.",
                "list":[  
                    {  
                        "name":"Plugin",
                        "tech":[  
                            "C#",
                            "TCP"
                        ],
                        "desc":"Specialized plugin written in C# is ran on the Windows environment to read the game values through detection of memory signatures.\\nThe data is batched and sent to the Node.js server through TCP at a set interval or when a threshold is reached for compression efficiency."
                    },
                    {  
                        "name":"Server",
                        "tech":[  
                            "Node.js"
                        ],
                        "desc":"A server was needed to keep track of data received from the player and its logged in state. Received gameplay data is inserted in order into a Redis hash list to take advantage of its optimized memory efficiency. As the raw data is temporarily held, an in-memory database was used. When the server receives a termination event from the client, it will place a command into a message queue for the next step."
                    },
                    {  
                        "name":"Worker",
                        "tech":[  
                            "Node.js"
                        ],
                        "desc":"Workers are used to parse stored raw gameplay data. It actively listens to a message queue for a termination event to begin parsing a specific Redis hash list. The parsed data becomes normalized and is stored in MySQL for the web application. It also saves a copy as JSON for the replay feature."
                    },
                    {  
                        "name":"Databases",
                        "tech":[  
                            "MySQL",
                            "Redis"
                        ],
                        "desc":"MySQL was selected as the primary database due to the relational nature of our data. It also provided aggregation functions, perfect for the analytic features of the website.\\nRedis is used as a temporary store for incoming game data and primary cache layer for the website. Rendered HTML is cached in the store for a time period to prevent heavy hits to the MySQL database."
                    },
                    {  
                        "name":"Website",
                        "tech":[  
                            "PHP",
                            "APCu",
                            "Javascript"
                        ],
                        "desc":"Filters such as specific players and enemy units can be selected to see related actions made instead of an average performance number over time. Highcharts was used for its a highly customizable charts to create specific features for the game. GSAP animation library is used to power the replay's video-like controls. The website is available in English, Japanese, French and German by parsing game files for appropriate text strings and then stored in PHP's shared memory.\\nTwitter is integrated to provide update annoucements."
                    }
                ]
            },
            "design":{  
                "subtitle":"Interface is designed to accommodate the different analytic features.",
                "list":[  
                    {  
                        "caption":"Summary Page",
                        "src":"xivdps-5.jpg",
                        "size": [1245, 917]
                    },
                    {  
                        "caption":"Side Comparison",
                        "src":"xivdps-1.jpg",
                        "size": [1245, 992]
                    },
                    {  
                        "caption":"Usage Timeline",
                        "src":"xivdps-2.jpg",
                        "size": [1245, 1122]
                    },
                    {  
                        "caption":"Individual Actions",
                        "src":"xivdps-3.jpg",
                        "size": [1245, 1154]
                    },
                    {  
                        "caption":"Action Replay",
                        "src":"xivdps-4.jpg",
                        "size": [1245, 917]
                    },
                    {  
                        "caption":"Language Settings",
                        "src":"xivdps-6.jpg",
                        "size": [1245, 1055]
                    },
                    {  
                        "caption":"Component Architecture",
                        "src":"xivdps_flow.png",
                        "size": [695, 570]
                    }
                ]
            }
        },

        {  
            "uid":"tank-wars",
            "name":"Tank Wars",
            "year":"2013",
            "type":"Game",
            "url":"http://www.sfu.ca/~pmchung/tank-wars/",
            "source":"http://www.github.com/philarr/tank-wars",
            "desc":"HTML5 canvas game using object-oriented programming and visualization techniques.",
            "tech":[  
                "Processing"
            ],
            "color":[  
                "#252629",
                "#222222"
            ],
            "display":{  
                "front":{  
                    "caption":"Game menu",
                    "src":"tank-wars-1.jpg",
                    "size": [800, 600]
                },
                "secondary":{  
                    "caption":"Gameplay",
                    "src":"tank-wars-3.jpg",
                    "size": [800, 600]
                }
            },
            "overview":"Tank Wars is written in Processing (a Java subset language) and ran on the browser with Processing.js. The basis of this game is to use the fundamentals of object-oriented programming and visual rendering techniques. The architecture of the game is planned to allow quick addition of entities through 2D arrays. Since the map level is also drawn from arrays, the option for a map editor is also possible. Gameplay mechanics is also extendable from existing classes to create different enemy types.",
            "components":{  
                "subtitle":"Scalability was the focus when designing the features.",
                "list":[  
                    {  
                        "name":"Controls",
                        "tech":[],
                        "desc":"Tank Wars uses a common control scheme found in First Person Shooter games. With W/A/S/D keys, the player can control the movement of the tank, switch weapons with R key and charge up its weapon with space bar. Mouse movement allows the player to control the rotation of the turret."
                    },
                    {  
                        "name":"Camera & Dialogue",
                        "tech":[],
                        "desc":"The point of view is fixated on the player. In order to create a story-telling scenario, triggers can force the camera control, allowing the game to decide what the player will see. Instance of the camera and dialogue object can be passed to entities, allowing scripted battles."
                    },
                    {  
                        "name":"Map & Entities",
                        "tech":[],
                        "desc":"Every entity such as enemy tanks, moveable blocks, doors and switches are mapped onto a 2D array. Each render loop, checks are made to decide whether to render or not to ensure a smooth draw cycle.\\nEntity collision is efficiently checked by accessing the object's surrounding indices for O(1) complexity."
                    },
                    {  
                        "name":"Boss scripting",
                        "tech":[],
                        "desc":"By extending existing entity classes, enemy units can be heavily customized. A proof of concept is available in Boss.pde to showcase an enemy unit with different phases and ability to trigger dialogues."
                    }
                ]
            },
            "design":{  
                "subtitle":"Inspiration from retro games was used to create the visuals.",
                "list":[  
                    {  
                        "caption":"Game Menu",
                         "src":"tank-wars-1.jpg",
                        "size": [800, 600]
                    },
                    {  
                        "caption":"Dialogue Box",
                        "src":"tank-wars-2.jpg",
                        "size": [800, 600]
                    },
                    {  
                        "caption":"AI Target & Pathing",
                        "src":"tank-wars-3.jpg",
                        "size": [800, 600]
                    }
                ]
            }
        }
    ]
}